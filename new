[
    {
      "id": 1,
      "fullName": "Jenny Chan",
      "address": "3 waterfoot road",
      "phoneNumber": "333-962-7516",
      "email": "jenny.chan@email.com"
    },
    {
      "id": 2,
      "fullName": "Jessica warren",
      "address": "4 tall town",
      "phoneNumber": "011-211-7516",
      "email": "jessica.warren@email.com"
    },
    {
      "id": 3,
      "fullName": "Tony Frank",
      "address": "11 lesly road",
      "phoneNumber": "788-962-7516",
      "email": "tony.frank@email.com"
    },
    {
      "id": 4,
      "fullName": "Jeremy Clark",
      "address": "333 miltown manor",
      "phoneNumber": "011-962-111",
      "email": "jeremy.clark@email.com"
    },
    {
      "id": 5,
      "fullName": "Raymond Edwards",
      "address": "99 blue acres",
      "phoneNumber": "3231-962-7516",
      "email": "raymon.edwards@email.com"
    }
  ]
  
  import React, { useState } from "react";
import data from "./epmdata.json";
import { nanoid } from "nanoid";
const Storedata = () => {
  const [contacts, setContacts] = useState(data);
  const [addFormData, setAddFormData] = useState({
    fullName: "",
    address: "",
    phoneNumber: "",
    email: "",
  });

  const handleAddFormChange = (event) => {
    event.preventDefault();
    const fieldName = event.target.getAttribute("name");
    const fieldValue = event.target.value;

    const newFormData = { ...addFormData };
    newFormData[fieldName] = fieldValue;
    setAddFormData(newFormData);
  };

  const handAddFormSubmit = (event) => {
    event.preventDefault();

    const newContact = {
      id: nanoid(),
      fullName: addFormData.fullName,
      address: addFormData.address,
      phoneNumber: addFormData.phoneNumber,
      email: addFormData.email,
    };

    const newContacts = [...contacts, newContact];
    setContacts(newContacts);
  };

  return (
    <div className="app-container">
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Address</th>
            <th>Phone Number</th>
            <th>Email</th>
          </tr>
        </thead>
        <tbody>
          {contacts.map((contact) => (
            <tr>
              <td>{contact.fullName}</td>
              <td>{contact.address}</td>
              <td>{contact.phoneNumber}</td>
              <td>{contact.email}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <h2>Add Contacts</h2>
      <form onSubmit={handAddFormSubmit}>
        <input
          type="text"
          name="fullName"
          required="required"
          placeholder="Enter full name"
          onChange={handleAddFormChange}
        />
        <input
          type="text"
          name="address"
          required="required"
          placeholder="Enter full address"
          onChange={handleAddFormChange}
        />
        <input
          type="text"
          name="phoneNumber"
          required="required"
          placeholder="Enter phoneNumber"
          onChange={handleAddFormChange}
        />
        <input
          type="email"
          name="email"
          required="required"
          placeholder="Enter email"
          onChange={handleAddFormChange}
        />
        <button type="submit">Add Data</button>
      </form>
    </div>
  );
};

export default Storedata;


.app-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 1rem;
}

.app-container table {
  border-collapse: collapse;
  width: 100%;
}

.app-container th,
.app-container td {
  border: 1px solid #ffffff;
  text-align: left;
  padding: 8px;
  font-size: 32px;
}

.app-container th {
  background-color: rgb(117, 201, 250);
  font-size: 14px;
}

.app-container td {
  background-color: rgb(205, 235, 253);
  font-size: 14px;
}

.app-container form {
  display: flex;
  gap: 5px;
}

.app-container form td:last-child {
  display: flex;
  justify-content: space-evenly;
}

.app-container form * {
  font-size: 14px;
}
